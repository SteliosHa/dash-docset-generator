#!/usr/bin/env node

var shell = require('shelljs/global')
  , chalk = require('chalk')
  , path  = require('path')
  , docs  = require('../build/index')
  , fs    = require('fs')
  , when = require('when')

var argv = require('yargs')
                .describe('i', 'The directory containing the source files to be converted into a docset.').alias('i', 'inputDir').demand('i').string('c')
                .describe('o', 'The directory in which to place the generated docset.').alias('o', 'outputDir').default('o', 'build').string('o')
                .describe('c', 'The config file, if an "index.md" with YAML front matter does not exist.').alias('c', 'config').string('c')
                .usage('Usage: $0 -i <input dir> [-o <output dir>]')
                .argv

var SRC_DIR   = argv.inputDir
var BUILD_DIR = argv.outputDir

// ensure the build directory exists
mkdir('-p', BUILD_DIR)

var configPath = !!argv['config'] ? argv['config']
                                    : path.join(argv.inputDir, 'index.md')

// var indexFile = path.join(argv.inputDir, 'index.md')

function loadDocsetConfig() {
    var type = path.extname(configPath).toLowerCase()
    switch (type) {
        case '.md':     return docs.DocsetConfig.fromMarkdown(configPath, argv.outputDir)
        case '.yaml':   return docs.DocsetConfig.fromYAML(configPath, argv.inputDir, argv.outputDir)
        case '.json':   return docs.DocsetConfig.fromJSON(configPath, argv.inputDir, argv.outputDir)
        default:        return when.reject('Config files must end in .yaml, .json, or .md')
    }
}

loadDocsetConfig().done(
    function (config) { new docs.DocsetBuilder(config).build() },
    function (err)  {
        console.error(`Error: ${err}`)
        console.log(err.stack)
    }
)


function needsBuild(file, builtProduct) {
    return mtime(file) > mtime(builtProduct)
}

function builtProductFor(file) {
    return path.join(BUILD_DIR, path.basename(file))
}

function mtime(file) {
    if (fs.existsSync(file)) {
        var stat = fs.statSync(file)
        return stat.mtime.getTime()
    }
    return 0
}

function print(msg) {
    process.stderr.write(msg)
}

function formatResult(result) {
    if (result.code === 0) {
        return chalk.green('success')
    }
    else {
        require('eyes').inspect(result)
        return chalk.red('failed (result = ' + result + ')')
    }
}



